//
//	Abstract
//

/*
	
	So goal is to have a filesystem based static site generator.

	To that end I need to:

		1) parse directory structure into site representation.					//check
			-need better per page/article configuration 						//check
		2) step through that and gen everything. 								//pages generating
		3) copy images, styles over
		4) blog listing
		5) tagging, now we're getting crazy

	Without a blog, this is relatively easy, so, we'll start there I think.		//check

*/

var fs = require('fs');
var md = require('node-markdown').Markdown;
var jade = require('jade');
var util = require('util');

(function (root, factory) {
    if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like enviroments that support module.exports,
        // like Node.
        module.exports = factory(global);
    } else if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], function () {
            return factory(root);
        });
    } else {
        // Browser globals
        factory(root);
    }
}(this, function (root) {
    "use strict";
	
	//get the execution path of the main script.

	var rootPath = require('path').dirname(require.main.filename);
	
	//object describing 
	var configuration;

	var invalidFiles = ['.DS_Store'];

	function loadContent(){
		var articles = fs.readdirSync(rootPath + "/articles");
		var pages = fs.readdirSync(rootPath + "/pages");
		var articlesLength = articles.length;
		var pagesLength = pages.length;

		var obj = {
			articles : new Array(),
			pages : new Array()
		};

		for(var i = 0; i < articlesLength; i++){
			var a = contentObjectFromFile(articles[i],'articles')
			if(a) obj.articles.push(a);
		}

		for(var i = 0; i < pagesLength; i++){
			var p = contentObjectFromFile(pages[i],'pages')
			if(p) obj.pages.push(p);
		}
		return obj
	}

	function contentObjectFromFile(name,section){
		var valid = !contains(invalidFiles, name)
		if(valid){
			var file = fs.readFileSync(rootPath+"/"+section+"/"+name).toString();
			var time = fs.statSync(rootPath+"/"+section+"/"+name).ctime;

			var sections = file.split(':body')

			//added inline json object, could be used for tags and stuff, that sort of thing.
			var info = JSON.parse(sections[0]);
			info.title;
			var body = sections[1];
			
			var obj = {
				name:name.replace('.md',''),
				title:info.title,
				subTheme:(info.subTheme) ? info.subTheme : 'default',
				body: md(body.trim()),
				date: time
			}
			return obj
		}
	}

	function createNavList(obj){
		var nl = new Array();
		var pagesLength = obj.pages.length;
		for(var i = 0; i < pagesLength; i++){
			var n = (obj.pages[i].name == 'index') ? 'index.html' : obj.pages[i].name;
			var l = n.replace(' ','_');
			var navItem = {
				title:obj.pages[i].title,
				name:n,
				link:l,
			}
			navItem.html = "<a href='"+configuration.baseURL+navItem.link+"'>"+navItem.title+"</a>";
			nl.push(navItem);
		}
		return nl
	}

	function render(contentTree,navList){
		var pagesLength = contentTree.pages.length;
		for(var i = 0; i<pagesLength; i++){
			
			var path = rootPath + "/themes/" + configuration.themeDir + "/views/"+contentTree.pages[i].subTheme+".jade";
			jade.renderFile(path, {config:configuration,p:contentTree.pages[i],nav:navList,pretty:true},function(err,html){
				if(err){
					console.error('\nTheres something wrong with the template located at:');
					console.error(path);
					console.error('\n'+err + '\n');
				} else {
					var oBuf = new Buffer(html);
					var name = (contentTree.pages[i].name == "index") ? "" : contentTree.pages[i].name + "/";
					var oPath = rootPath + "/o/" + name;
					var filePath = oPath + "index.html";
					fs.mkdir(oPath,"0777",function(err){
						fs.open(filePath, 'w',function(err,file){
							if(err){
								console.error("\nCouldn't open file for output:");
								console.error(oPath);
								console.error('\n' + err + '\n');
							} else {
								fs.write(file, oBuf, 0, oBuf.length, 0,function(err){
									if(err){
										console.error("\nCouldn't write to file:");
										console.error(oPath);
										console.error('\n' + err + '\n');
									}
								});
							}
						});
					})
				}
			})
		}
	}
	function isValidConfiguration(c){
		//well, this is rudimentary, but there it is. this is where the better checking would go. hows that.
		if((typeof c.baseURL == 'string') && c.title && c.themeDir){
			return true;
		} else {
			return false;
		}
	}
	function contains(obj,str){
		for (var key in obj){
			if(obj[key] == str){
				return true
			}
		}
		return false
	}
	return {
		init : function(c){
			if(isValidConfiguration(c)){
				configuration = c;
				return this
			} else {
				throw('Configuration Error');
			}
		},
		generate : function(){
			var contentTree = loadContent();
			var navList = createNavList(contentTree);
			render(contentTree,navList);
		},
		dryRun : function(){
			var contentTree = loadContent();
			var navList = createNavList(contentTree);
			console.log(contentTree);
		}
	}
}));